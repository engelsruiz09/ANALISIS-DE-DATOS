#12. Muestre una gráfica de la densidad por hora.
#dataset$dteday <- as.POSIXct(dataset$dteday, format = "%d-%m-%y")
dataset$hour <- as.POSIXlt(dataset$dteday)$hour#creo una columna en el dataset llamada hour contiene la hora del dia 0 - 23 extraida de dteday
dataset %>%
group_by(hour) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = hour, y = total_rentas)) +
geom_bar(stat = "identity", fill = "green") +
ggtitle("Total de rentas por hora") +
xlab("Hora del día") +
ylab("Cantidad total de rentas")
install.packages("lubridate")
library(dplyr)
library(ggplot2)
library(lubridate)
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
#dataset$datetime <- as.POSIXct(dataset$dteday, format = "%d-%m-%y")
dataset
#12. Muestre una gráfica de la densidad por hora.
#dataset$dteday <- as.POSIXct(dataset$dteday, format = "%d-%m-%y")
dataset$datetime <- mdy(dataset$dteday)
library(dplyr)
library(ggplot2)
library(lubridate)
#12. Muestre una gráfica de la densidad por hora.
#dataset$dteday <- as.POSIXct(dataset$dteday, format = "%d-%m-%y")
dataset$datetime <- mdy(dataset$dteday)
dataset$hour <- hour(datos_bicicletas$datetime)
#12. Muestre una gráfica de la densidad por hora.
#dataset$dteday <- as.POSIXct(dataset$dteday, format = "%d-%m-%y")
dataset$datetime <- mdy(dataset$dteday)
dataset$hour <- hour(dataset$datetime)
#dataset$hour <- as.POSIXlt(dataset$dteday)$hour#creo una columna en el dataset llamada hour contiene la hora del dia 0 - 23 extraida de dteday
dataset %>%
group_by(hour) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = hour, y = total_rentas)) +
geom_bar(stat = "identity", fill = "green") +
ggtitle("Total de rentas por hora") +
xlab("Hora del día") +
ylab("Cantidad total de rentas")
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
#dataset$datetime <- as.POSIXct(dataset$dteday, format = "%d-%m-%y")
dataset
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
dataset$datetime <- as.POSIXct(dataset$dteday, format = "%m-%d-%y")
dataset$hour <- as.POSIXlt(dataset$dteday)$hour
dataset
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
dataset
library(dyplr)
library(dyplyr)
library(dplyr)
library(ggplot)
library(dplyr)
library(ggplot2)
dataset <- read.csv2("train_HP.csv")
head(dataset)
library(dplyr)
library(ggplot2)
dataset <- read.csv2("train_HP.csv")
head(dataset)
library(dplyr)
library(ggplot2)
dataset <- read.csv2("train_HP.csv")
head(dataset)
library(dplyr)
library(ggplot2)
dataset <- read.csv("train_HP.csv")
head(dataset)
ColsNa <- colnames(dataset)[!complete.cases(dataset)]#quitar cosas que tenga cosas completas
ColsNa
#obtener un porcentaje de los casos incompletos por columna
incompleteData <- dataset %>%
select(ColsNa)
#identificando columnas con datos nulos (NA)
ColsNa <- colnames(dataset)[!complete.cases(T(dataset))]#el (!) quitar cosas que tenga cosas completas
#identificando columnas con datos nulos (NA)
ColsNa <- colnames(dataset)[!complete.cases(t(dataset))]#el (!) quitar cosas que tenga cosas completas
ColsNa
#obtener un porcentaje de los casos incompletos por columna
incompleteData <- dataset %>%
select(ColsNa)
PorcentajeNA <- as.data.frame(apply(incompleteData,2,function(col)sum(is.na(col))/lenght(col)))
#obtener un porcentaje de los casos incompletos por columna
incompleteData <- dataset %>%
select(ColsNa)
PorcentajeNA <- as.data.frame(apply(incompleteData,2,function(col)sum(is.na(col))/lengh(col)))
#obtener un porcentaje de los casos incompletos por columna
incompleteData <- dataset %>%
select(ColsNa)
PorcentajeNA <- as.data.frame(apply(incompleteData,2,function(col)sum(is.na(col))/length(col)))
colnames(PorcentajeNA) <- c("Porcentaje")
PorcentajeNA
#obtener un porcentaje de los casos incompletos por columna
incompleteData <- dataset %>%
select(ColsNa)
PorcentajeNA <- as.data.frame(apply(incompleteData,2,function(col)sum(is.na(col))/length(col)))
colnames(PorcentajeNA) <- c("Porcentaje")
#PorcentajeNA
procesables <- PorcentajeNA %>%
filter(Porcentaje <= 0.05)
procesables
dim(dataset)
dim(dataset) #1460 filas y 81 columnas
dataset %>%
ggplot(aes(x=MasVnrArea)) +
geom_histogram(color="white", fill="red",alpha=0.08)+
theme_minimal()
dim(dataset) #1460 filas y 81 columnas
dataset %>%
ggplot(aes(x=GrLivArea)) +
geom_histogram(color="white", fill="red",alpha=0.08)+
theme_minimal()
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
ggplot %>%
ggplot(aes(x=GrLivArea,y=..density..)) +
geom_density(color="blue",alpha=0.8)+
geom_density(aes(x=GrLivAreaMean,y=..density..),color="red",alpha=0.8)+
geom_density(aes(x=GrLivAreaMedian,y=..density..),color="green",alpha=0.8)+
theme_minimal()
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset %>%
ggplot(aes(x=GrLivArea,y=..density..)) +
geom_density(color="blue",alpha=0.8)+
geom_density(aes(x=GrLivAreaMean,y=..density..),color="red",alpha=0.8)+
geom_density(aes(x=GrLivAreaMedian,y=..density..),color="green",alpha=0.8)+
theme_minimal()
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
median(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset %>%
ggplot(aes(x=GrLivArea,y=..density..)) +
geom_density(color="blue",alpha=0.8)+
geom_density(aes(x=GrLivAreaMean,y=..density..),color="red",alpha=0.8)+
geom_density(aes(x=GrLivAreaMedian,y=..density..),color="green",alpha=0.8)+
theme_minimal()
getmode <- function(v){
uniqv <-unique(x)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
median(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMode <- ifelse(dataset$GrLivArea,
getmode(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
getmode <- function(v){
uniqv <-unique(x)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
median(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMode <- ifelse(dataset$GrLivArea,
getmode(dataset$GrLivArea),
dataset$GrLivArea)
getmode <- function(v){
uniqv <-unique(x)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
median(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMode <- ifelse(dataset$GrLivArea,
getmode(dataset$GrLivArea),
dataset$GrLivArea)
getmode <- function(v){
uniqv <-unique(x)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
median(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMode <- ifelse(dataset$GrLivArea,
getmode(dataset$GrLivArea),
dataset$GrLivArea)
getmode <- function(v){
uniqv <-unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
dataset$GrLivAreaMean <- ifelse(dataset$GrLivArea,
mean(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMedian <- ifelse(dataset$GrLivArea,
median(dataset$GrLivArea,na.rm = T),
dataset$GrLivArea)
dataset$GrLivAreaMode <- ifelse(dataset$GrLivArea,
getmode(dataset$GrLivArea),
dataset$GrLivArea)
print(getmode(dataset$GrLivArea))
dataset %>%
ggplot(aes(x=GrLivArea,y=..density..)) +
geom_density(color="blue",alpha=0.8)+
geom_density(aes(x=GrLivAreaMean,y=..density..),color="red",alpha=0.8)+
geom_density(aes(x=GrLivAreaMedian,y=..density..),color="green",alpha=0.8)+
geom_density(aes(x=GrLivAreaMode,y=..density..),color="skyblue",alpha=0.8)+
theme_minimal()
#utilizar solo datos completos
CCA <-dataset[ , apply(dataset,2,function(x) !any(is.na(x)))]
CCA
#Frequency encodig
table(dataset$BsmtQual)
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual)]+
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%+
summarize(FreqVal = n(),Density=n()/nrow(dataset))
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>% +
summarize(FreqVal = n(),Density=n()/nrow(dataset))
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%
summarize(FreqVal = n(),Density=n()/nrow(dataset))%>%
arrange(-FreqVal)
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%
summarize(FreqVal = n(),Density=n()/nrow(dataset))%>%
arrange(-FreqVal)
FreqImpact
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%
summarize(BsmtQualFreq = n(),Density=n()/nrow(dataset))%>%
arrange(-BsmtQualFreq)
FreqImpact
merge(dataset,FreqImpact,by.x = "BsmtQual",by.y = "BsmtQual")
select(BsmtQual,BsmtQualFreq)
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%
summarize(BsmtQualFreq = n(),Density=n()/nrow(dataset))%>%
arrange(-BsmtQualFreq)
FreqImpact
merge(dataset,FreqImpact,by.x = "BsmtQual",by.y = "BsmtQual") %>%
select(BsmtQual,BsmtQualFreq)
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%
summarize(BsmtQualFreq = n(),Density=n()/nrow(dataset))%>%
arrange(-BsmtQualFreq)
FreqImpact
merge(dataset,FreqImpact,by.x = "BsmtQual",by.y = "BsmtQual")
select(BsmtQual,BsmtQualFreq)
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%
summarize(BsmtQualFreq = n(),Density=n()/nrow(dataset))%>%
arrange(-BsmtQualFreq)
FreqImpact
merge(dataset,FreqImpact,by.x = "BsmtQual",by.y = "BsmtQual")
select(BsmtQual,BsmtQualFreq)
#Frequency encodig
table(dataset$BsmtQual)
FreqImpact <- dataset %>%
group_by(BsmtQual) %>%
summarize(BsmtQualFreq = n(),BsmtQualDensity=n()/nrow(dataset))%>%
arrange(-BsmtQualFreq)
FreqImpact
merge(dataset,FreqImpact,by.x = "BsmtQual",by.y = "BsmtQual") %>%
select(BsmtQual,BsmtQualDensity)
dataset
#12. Muestre una gráfica de la densidad por hora.
dataset %>%
group_by(hr) %>%
summarize(suma=sum(cnt))
#12. Muestre una gráfica de la densidad por hora.
dataset %>%
group_by(hr) %>%
summarize(suma=sum(cnt))%>%
ggplot(aes(x=suma, y=..density..))+
geom_density(color="red",alpha=0.8)+
theme_minimal()
library(dplyr)
library(ggplot2)
library(lubridate)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
#12. Muestre una gráfica de la densidad por hora.
dataset %>%
group_by(hr) %>%
summarize(suma=sum(cnt))%>%
ggplot(aes(x=suma, y=..density..))+
geom_density(color="red",alpha=0.8)+
theme_minimal()
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
dataset
#12. Muestre una gráfica de la densidad por hora.
dataset %>%
group_by(hr) %>%
summarize(suma=sum(cnt))%>%
ggplot(aes(x=suma, y=..density..))+
geom_density(color="red",alpha=0.8)+
theme_minimal()
#12. Muestre una gráfica de la densidad por hora.
dataset %>%
group_by(hr) %>%
summarize(suma=sum(cnt))%>%
ggplot(aes(x=suma, y=..density..))+
geom_density(color="red",alpha=0.8)+
labs(title = "Densidad por hora",
x = "Hora",
y = "Density")
theme_minimal()
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
install.packages("lubridate")
install.packages("stringr")
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$dteday <- as.Date(dataset$dteday,formta = "%d/%m/%y")
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
library(dplyr)
library(ggplot2)
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$dteday <- as.Date(dataset$dteday,formta = "%d/%m/%y")
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
dataset$dteday <- as.Date(dataset$dteday,formta = "%d/%m/%y")
dataset
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = day, y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
dataset$dteday <- as.Date(dataset$dteday,formate = "%d/%m/%y")
dataset
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
dataset$dteday <- as.Date(dataset$dteday,format = "%d/%m/%y")
dataset
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = day, y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
ggtitle("Total de rentas por día del mes")
#13. . Muestre una gráfica de barras por día del mes como eje x y la cantidad total de alquileres como el eje Y.
dataset$day <- as.POSIXlt(dataset$dteday)$mday#creo una nueva columna en dataset llamada day contiene dia del mes 1 - 31 extraido de la columna dteday
dataset %>%
group_by(day) %>%
summarise(total_rentas = sum(cnt)) %>%
ggplot(aes(x = factor(day), y = total_rentas)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title = "Total de rentas por día del mes",
x = "Dia",
y = "Total de rentas")
# 2. que horas es la de mayor demanda
ds2 <- dataset %>%
group_by(hr) %>%
summarise(suma = sum(cnt)) #mean, mediana,
library(dplyr)
library(ggplot2)
# 2. que horas es la de mayor demanda
ds2 <- dataset %>%
group_by(hr) %>%
summarise(suma = sum(cnt)) #mean, mediana,
ds2
ggplot(ds2,aes(y = suma, x= factor(hr),fill=suma)) +
geom_bar(position = "dodge",stat = "identity") +
labs(title = "Cantidad de rentas por hora", y = "Cantidad", x = "Hora") +
geom_text(aes(label=suma),vjust=1.6, color="white",size=2.5)+
theme_minimal()
# 2. que horas es la de mayor demanda
ds2 <- dataset %>%
group_by(hr) %>%
summarise(suma = sum(cnt)) #mean, mediana,
ds2
ggplot(ds2,aes(y = suma, x= factor(hr),fill=suma)) +
geom_bar(position = "dodge",stat = "identity") +
labs(title = "Cantidad de rentas por hora", y = "Cantidad", x = "Hora") +
geom_text(aes(label=suma),vjust=1.6, color="white",size=2.5)+
theme_minimal()
#9. Determine la mediana de personas que rentan bicicletas y no están registradas.
dataset %>%
summarise(median_casual = median(casual))
library(dplyr)
library(ggplot2)
dataset <- read.csv2("hour.csv") #cargar csv al dataset
dataset$temp <- as.numeric(dataset$temp)
dataset$atemp <- as.numeric(dataset$atemp)
dataset$windspeed <- as.numeric(dataset$windspeed)
dataset$dteday <- as.Date(dataset$dteday,format = "%d/%m/%y")#como la fecha esta en char lo paso a un formato de tipo fecha para poder trabajar mas adelante
dataset
#9. Determine la mediana de personas que rentan bicicletas y no están registradas.
dataset %>%
summarise(median_casual = median(casual))
#9. Determine la mediana de personas que rentan bicicletas y no están registradas.
dataset %>%
summarise(median = median(casual))
#9. Determine la mediana de personas que rentan bicicletas y no están registradas.
dataset %>%
summarise(mediana_personas = median(casual))
