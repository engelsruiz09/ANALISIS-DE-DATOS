install.packages("devtools")
devtools::install_github("UBC-MDS/encodeR")
library(encodeR)
#proyecto clasificacion binaria
dstest2$Purchase.Bike <- ifalse(dstest2$Purchased.Bike == "Yes", 1,0)
devtools::install_github("UBC-MDS/encodeR")
library(encodeR)
dstest2 <- dstest
#proyecto clasificacion binaria
dstest2$Purchase.Bike <- ifalse(dstest2$Purchased.Bike == "Yes", 1,0)
dataset <- read.csv("advertising2.csv", header=T,na.strings = '')
head(dataset)
#paso 1 evaluar dataset
#paso 2 datos faltantes
#paso 3 transformar variables categoricas
#paso 4 normalizar
#paso 5 correlacion
#paso 6 experimentacion
m <- cor(dataset) #darme la correlacion de las variables que existen en el set de datos
m
corrplot(m,type="upper",order="hclust",col=brewer.pal(n=8,name="RdYlBu"))
library(dplyr)
library(ggplot2)
library(corrplot) #ayudar a ver la mitad de los 1unos mas bonita
library(RColorBrewer)
library(encodeR)
dstest2 <- dstest
m <- cor(dataset) #darme la correlacion de las variables que existen en el set de datos
m
corrplot(m,type="upper",order="hclust",col=brewer.pal(n=8,name="RdYlBu"))
#experimento 1-sales con newspaper
model <- lm(Sales~Newspaper,data=dataset)#funcion lm
#summary(model)
summary(model)$r.squared
sigma(model)
#tomar la varible mas significativa
#experimento 2 sales con TV
model2 <- lm(Sales~TV,data=dataset)#funcion lm
summary(model2)
#experimento3 - sales con TV+Newspaper
model3 <- lm(Sales~TV+Newspaper,data=dataset)#funcion lm
summary(model3)
# y = 0.055091x1 +  0.026021x2 + 6.234744
model4 <- lm(Sales~TV+Newspaper+Radio,data=dataset)#funcion lm
summary(model4)
dstest$Income[is.na(dstest$Income)] <- median(na.omit(dstest$Children))
#experimento 1-sales con newspaper
model <- lm(Sales~Newspaper,data=dataset)#funcion lm
#summary(model)
summary(model)$r.squared
sigma(model)
#tomar la varible mas significativa
#experimento 2 sales con TV
model2 <- lm(Sales~TV,data=dataset)#funcion lm
summary(model2)
#experimento3 - sales con TV+Newspaper
model3 <- lm(Sales~TV+Newspaper,data=dataset)#funcion lm
summary(model3)
# y = 0.055091x1 +  0.026021x2 + 6.234744
model4 <- lm(Sales~TV+Newspaper+Radio,data=dataset)#funcion lm
summary(model4)
dstest$Income[is.na(dstest$Income)] <- median(na.omit(dstest$Children))
install.packages("GGally")
library(GGally)
library(ggplot2)
corr <- dstest2
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE){
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if(train == TRUE){
return (data[train_sample, ])
}else{
return (data[-train_sample, ])
}
}
data.train <-create_train_test(dstest2, 0.8, train=TRUE)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE){
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if(train == TRUE){
return (data[train_sample, ])
}else{
return (data[-train_sample, ])
}
}
data.train <-create_train_test(dstest2, 0.8, train=TRUE)
model <- glm(train.Purchase.Bike=train.Comute.Distance+train.Education,data_train_family = binarial())
model <- glm(train.Purchase.Bike=train.Commute.Distance+train.Education,data_train_family = binarial())
library(dplyr)
library(ggplot2)
library('corrplot')
library('RColorBrewer')
datasetoriginal <- read.csv('compradoresbicis.csv',header=T,na.strings = '')
library(dplyr)
library(ggplot2)
library('corrplot')
library('RColorBrewer')
datasetoriginal <- read.csv('compradoresbicis.csv',header=T,na.strings = '')
datasetoriginal
summary(datasetoriginal)
dstest <- datasetoriginal
dstest$Marital.Status <- as.factor(dstest$Marital.Status)
dstest$Gender <- as.factor(dstest$Gender)
dstest$Home.Owner <- as.factor(dstest$Home.Owner)
dstest$Purchased.Bike <- as.factor(dstest$Purchased.Bike)
dstest$Occupation <- as.factor(dstest$Occupation)
dstest$Commute.Distance <- as.factor(dstest$Commute.Distance)
dstest$Region <- as.factor(dstest$Region)
dstest$Education <- as.factor(dstest$Education)
str(dstest)
colSums(is.na(dstest))
summary(dstest)
hist(dstest$Income)
hist(dstest$Children)
hist(dstest$Cars)
hist(dstest$Age)
#print('Mediana age: 'as.character(median(dstest$Age)))
median(na.omit(dstest$Age))
mean(na.omit(dstest$Age))
#print('Media Age:',mean(dstest$Age))
#print('Mediana Income:',median(dstest$Income))
#print('Media Income:',mean(dstest$Income))
median(na.omit(dstest$Income))
mean(na.omit(dstest$Income))
colSums(is.na(dstest))
dstest$Income[is.na(dstest$Income)] <- median(na.omit(dstest$Income))
dstest$Age[is.na(dstest$Age)] <- mean(na.omit(dstest$Age))
##--------
dstest$Cars[is.na(dstest$Cars)] <- mean(na.omit(dstest$Cars))
dstest$Children[is.na(dstest$Children)] <- mean(na.omit(dstest$Cars))
getmode <- function(x){
unique_x <- unique(x)
tabulate_x <- tabulate(match(x,unique_x))
unique_x[tabulate_x == max(tabulate_x)]
}
dstest$Marital.Status[is.na(dstest$Marital.Status)] <- getmode(dstest$Marital.Status)
dstest$Gender[is.na(dstest$Gender)] <- getmode(dstest$Gender)
dstest$Home.Owner[is.na(dstest$Home.Owner)] <- getmode(dstest$Home.Owner)
write.csv(dstest,"compradoresbicis_clean.csv", quote = FALSE, row.names = TRUE)
dstest2 <- as.data.frame(dstest2)
devtools::install_github("UBC-MDS/encodeR")
dstest2 <- as.data.frame(dstest2)
library(encodeR)
dstest2 <- dstest
dstest2$Purchased.Bike <- ifelse(dstest2$Purchased.Bike == "Yes",1,0)
dstest2 <- target_encoder(dstest2,
y = dstest2$Purchased.Bike,
cat_columns = c("Marital.Status", "Gender","Education","Occupation","Commute.Distance","Region","Home.Owner"),
prior = 0.8,
objective = "regression"
)
dstest2
write.csv(dstest2,"compradoresbicis_numeric.csv", quote = FALSE, row.names = TRUE)
#dstest2 <- read.csv("compradoresbicis_numeric.csv")
summary(dstest2)
dstest2$train.Income = dstest$Income
dstest2$train.Income = (dstest2$train.Income - mean(dstest2$train.Income)) / sd(dstest2$train.Income)
#summary(dstest2)
#cor(dstest2)
library(GGally)
library(ggplot2)
# Convert data to numeric
corr <- dstest2
ggcorr(corr,
method = c("pairwise", "spearman"),
nbreaks = 6,
hjust = 0.8,
label = TRUE,
label_size = 3,
color = "grey50")
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(dstest2, 0.8, train = TRUE)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(dstest2, 0.8, train = TRUE)
write.csv(dstest,"compradoresbicis_clean.csv", quote = FALSE, row.names = TRUE)
dstest2 <- as.data.frame(dstest2)
summary(dstest2)
devtools::install_github("UBC-MDS/encodeR")
library(encodeR)
dstest2 <- dstest
dstest2$Purchased.Bike <- ifelse(dstest2$Purchased.Bike == "Yes",1,0)
dstest2 <- target_encoder(dstest2,
y = dstest2$Purchased.Bike,
cat_columns = c("Marital.Status", "Gender","Education","Occupation","Commute.Distance","Region","Home.Owner"),
prior = 0.8,
objective = "regression"
)
dstest2
write.csv(dstest2,"compradoresbicis_numeric.csv", quote = FALSE, row.names = TRUE)
#dstest2 <- read.csv("compradoresbicis_numeric.csv")
summary(dstest2)
dstest2$train.Income = dstest$Income
dstest2$train.Income = (dstest2$train.Income - mean(dstest2$train.Income)) / sd(dstest2$train.Income)
#summary(dstest2)
#cor(dstest2)
library(GGally)
library(ggplot2)
# Convert data to numeric
corr <- dstest2
ggcorr(corr,
method = c("pairwise", "spearman"),
nbreaks = 6,
hjust = 0.8,
label = TRUE,
label_size = 3,
color = "grey50")
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(dstest2, 0.8, train = TRUE)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(dstest2, 0.8, train = TRUE)
summary(data_train)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(dstest2, 0.8, train = TRUE)
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(dstest2, 0.8, train = TRUE)
#summary(dstest2)
#cor(dstest2)
library(GGally)
library(ggplot2)
# Convert data to numeric
corr <- dstest2
ggcorr(corr,
method = c("pairwise", "spearman"),
nbreaks = 6,
hjust = 0.8,
label = TRUE,
label_size = 3,
color = "grey50")
set.seed(1234)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(dstest2, 0.8, train = TRUE)
